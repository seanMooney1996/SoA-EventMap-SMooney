@using SoACA1v2.DataModels
@using SoACA1v2.Services
@using SoACA1v2.Services.StateManagement
@rendermode InteractiveServer
@inject EventStateService EventStateService



<div class="event-grid p-3">
    @if (IsLoading)
    {
        <div class="loader_events"></div>
    }
    else if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <p class="text-danger">@ErrorMessage</p>
    }
    else if (Events?.Any() == true)
    {
        <CardGroup>
            @foreach (var (e, index) in EventStateService.Events.Select((e, index) => (e, index)))
        {
            <Card class="shadow-sm event-card">
                <img src="@e.Images?.FirstOrDefault()?.Url"
                     alt="@e.Name"
                     class="card-img-top event-img" />
                <CardBody>
                    <CardTitle>@e.Name</CardTitle>
                    <CardText>@e.Embedded.Venues[0].City.Name</CardText>
                    <CardText>@e.Embedded.Venues[0].Name</CardText>
                    <CardText>@e.Dates?.Start?.LocalDate</CardText>
                    @if (!string.IsNullOrEmpty(@e.Embedded.Venues[0].Name))
                    {
                        <Button Color="ButtonColor.Primary"  @onclick="((args) => FindEventClicked(args,index ))" >Map</Button>
                    }
                </CardBody>
            </Card>
        }
        </CardGroup>
    }
    else
    {
        <p>No events found.</p>
    }
</div>

@code {
    private List<Event>? Events;
    private bool IsLoading;
    private string? ErrorMessage;

    protected override void OnInitialized()
    {
        EventStateService.OnChange += OnEventStateChanged;
        SyncState();
    }

    private void FindEventClicked(EventArgs args, int index)
    {
        Console.WriteLine($"Locating event at index --- {index} ");
        EventStateService.EventToLocateIndex = index;
    }

    private async void OnEventStateChanged()
    {
        await InvokeAsync(() =>
        {
            SyncState();
            StateHasChanged();
        });
    }

    private void SyncState()
    {
        Events = EventStateService.Events ?? new List<Event>();
        IsLoading = EventStateService.IsLoading;
        ErrorMessage = EventStateService.ErrorMessage;
        Console.WriteLine($"Synced state: {Events.Count} events , is Loading {IsLoading}");
    }
}

<style>
    .event-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 1.2rem;
        overflow-y: auto;
        max-height: 100%;
        padding-right: 0.5rem;
        padding-left: 0.5rem;
        padding-top:0 !important;
    }
    .event-card {
        min-width: 50%;
    }
    .event-img {
        height: 180px;
        width: 100%;
        object-fit: cover;
        border-top-left-radius: 0.375rem;
        border-top-right-radius: 0.375rem;
    }

    .event-grid::-webkit-scrollbar {
        width: 8px;
    }

    .event-grid::-webkit-scrollbar-thumb {
        background-color: #ccc;
        border-radius: 4px;
    }
    .loader_events {
        display: flex;
        justify-content: center;
        align-items: center;
        font-weight: bold;
        font-family: 'Segoe UI', sans-serif;
        font-size: 48px;
        color: #4285f4;
        text-align: center;
        border-radius: 8px;
        overflow: hidden;
        border: 1px solid #4285f4;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
        height: 100%;
        width: 100%;
        animation: l1 1s linear infinite alternate;
        z-index: 1000;
        background-color: rgba(255, 255, 255, 0.7);
    }
    .loader_events:before {
        content:"Loading Map Markers..."
    }
    @@keyframes l1 {to{opacity: 0}}
</style>
