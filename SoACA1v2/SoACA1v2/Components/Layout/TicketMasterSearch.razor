@page "/ticketmaster-search"
@implements IDisposable
@using SoACA1v2.DataModels
@using SoACA1v2.Services.StateManagement
@inject IWebHostEnvironment Env
@inject TicketMasterSearchStateService TicketMasterSearchStateService
@using System.Text.Json
@rendermode InteractiveServer
<div class="card shadow-sm p-3 search-card">
        <div class="row g-3 align-items-end">
            <div class="col-12 col-md-6">
                <label class="form-label fw-semibold">Keywords</label>
                <TextInput @bind-Value="@Keywords"
                           Placeholder="Enter keywords..."
                           Class="form-control" />
            </div>
            
            <div class="col-12 col-md-6">
                <label class="form-label fw-semibold">Genre</label>
                <div class="input-group">
                    <AutoComplete @bind-Value="GenreName"
                                  TItem="GenreItem"
                                  DataProvider="GenresDataProvider"
                                  PropertyName="Name"
                                  Placeholder="Select a genre..."
                                  OnChanged="OnGenreSelected" />
                    <button class="btn btn-outline-secondary" type="button" @onclick="ClearGenre">
                        Clear
                    </button>
                </div>
            </div>

            <!-- Country -->
            <div class="col-12 col-md-6">
                <label class="form-label fw-semibold">Country</label>
                <div class="input-group">
                    <AutoComplete @bind-Value="CountryName"
                                  TItem="CountryItem"
                                  DataProvider="CountryDataProvider"
                                  PropertyName="Name"
                                  Placeholder="Select a country..."
                                  OnChanged="OnCountrySelected" />
                    <button class="btn btn-outline-secondary" type="button" @onclick="ClearCountry">
                        Clear
                    </button>
                </div>
            </div>

            <!-- Dates -->
            <div class="col-6 col-md-3">
                <label class="form-label fw-semibold">Start Date</label>
                <DateInput TValue="DateOnly"
                           @bind-Value="StartDate"
                           Placeholder="Start date"
                           Class="form-control" />
            </div>

            <div class="col-6 col-md-3">
                <label class="form-label fw-semibold">End Date</label>
                <DateInput TValue="DateOnly"
                           @bind-Value="EndDate"
                           Placeholder="End date"
                           Class="form-control" />
            </div>
        </div>
    </div>
@code {
    private List<GenreItem> GenreList = new();
    private List<CountryItem> CountryList = new();
    
    private string? GenreName;
    private string? CountryName;

    private string Keywords
    {
        get => TicketMasterSearchStateService.Keywords;
        set => TicketMasterSearchStateService.Keywords = value;
    }
    private DateOnly StartDate
    {
        get => TicketMasterSearchStateService.StartDate;
        set => TicketMasterSearchStateService.StartDate = value;
    }

    private DateOnly EndDate
    {
        get => TicketMasterSearchStateService.EndDate;
        set => TicketMasterSearchStateService.EndDate = value;
    }

    protected override async Task OnInitializedAsync()
    {
        TicketMasterSearchStateService.OnChange += StateHasChanged;

        await LoadGenres();
        await LoadCountries();

        GenreName = TicketMasterSearchStateService.SelectedGenre?.Name;
        CountryName = TicketMasterSearchStateService.SelectedCountry?.Name;
    }
    
    private void ClearGenre()
    {
        OnGenreSelected(new GenreItem()); 
    }

    private void ClearCountry()
    {
        OnCountrySelected(new CountryItem());
    }

    private async Task LoadGenres()
    {
        try
        {
            var filePath = Path.Combine(Env.WebRootPath, "genre_name_to_id.json");
            var json = await File.ReadAllTextAsync(filePath);
            var map = JsonSerializer.Deserialize<Dictionary<string, string>>(json);

            if (map is not null)
                GenreList = map.Select(g => new GenreItem { Name = g.Key, Id = g.Value }).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading genres: {ex.Message}");
        }
    }

    private async Task LoadCountries()
    {
        try
        {
            var filePath = Path.Combine(Env.WebRootPath, "countries.json");
            var json = await File.ReadAllTextAsync(filePath);
            var map = JsonSerializer.Deserialize<Dictionary<string, string>>(json);

            if (map is not null)
                CountryList = map.Select(c => new CountryItem { Name = c.Key, Code = c.Value }).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading countries: {ex.Message}");
        }
    }

    private async Task<AutoCompleteDataProviderResult<GenreItem>> GenresDataProvider(AutoCompleteDataProviderRequest<GenreItem> request)
        => await Task.FromResult(request.ApplyTo(GenreList.OrderBy(g => g.Name)));

    private async Task<AutoCompleteDataProviderResult<CountryItem>> CountryDataProvider(AutoCompleteDataProviderRequest<CountryItem> request)
        => await Task.FromResult(request.ApplyTo(CountryList.OrderBy(c => c.Name)));

    private void OnGenreSelected(GenreItem? genre)
    {
        if (genre is null) return;

        GenreName = genre.Name;
        TicketMasterSearchStateService.SelectedGenre = genre;
    }

    private void OnCountrySelected(CountryItem? country)
    {
        if (country is null) return;

        CountryName = country.Name;
        TicketMasterSearchStateService.SelectedCountry = country;
    }

    public void Dispose()
    {
        TicketMasterSearchStateService.OnChange -= StateHasChanged;
    }
}
<style>
    .search-card {
        background-color: #fff;
        border-radius: 12px;
        height: 100%;
        padding: 1rem;
    }

    .form-label {
        font-size: 0.9rem;
        color: #333;
    }

    .input-group .btn {
        min-width: 70px;
    }

    .card-title {
        font-weight: 600;
    }
    .card-body{
        
    }
</style>
