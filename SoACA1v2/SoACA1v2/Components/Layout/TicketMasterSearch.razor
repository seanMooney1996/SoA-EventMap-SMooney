@page "/ticketmaster-search"
@implements IDisposable
@using SoACA1v2.DataModels
@using SoACA1v2.Services.StateManagement
@inject IWebHostEnvironment Env
@inject SearchStateService SearchStateService
@using System.Text.Json
@rendermode InteractiveServer
<div style="height:100%; display:flex;flex-direction: column; justify-content: flex-end;">
    <h2 style="color:#4285f4">Search for Events</h2>
    <div class="card shadow-sm search-card">
        <div class="row">
            <div class="col col75">
                <label class="form-label fw-semibold">Keywords</label>
                <TextInput @bind-Value="@Keywords"
                           Placeholder="Enter keywords..."
                           Class="form-control"/>
            </div>
            <div class="col ">
                <label class="form-label fw-semibold">Genre</label>
                <div class="input-grouped">
                    <AutoComplete @bind-Value="GenreName"
                                  TItem="GenreItem"
                                  DataProvider="GenresDataProvider"
                                  PropertyName="Name"
                                  Placeholder="Select a genre..."
                                  OnChanged="OnGenreSelected"
                                  Class="auto-comp"/>
                    <button class="btn btn-outline-secondary btn-search" type="button" @onclick="ClearGenre">
                        Clear
                    </button>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col col50">
                <label class="form-label fw-semibold">Country</label>
                <div class="input-grouped">
                    <AutoComplete @bind-Value="CountryName"
                                  TItem="CountryItem"
                                  DataProvider="CountryDataProvider"
                                  PropertyName="Name"
                                  Placeholder="Select a country..."
                                  OnChanged="OnCountrySelected"/>
                    <button class="btn btn-outline-secondary" type="button" @onclick="ClearCountry">
                        Clear
                    </button>
                </div>
            </div>
            <div class="col col50" style="display:flex;justify-content: space-between;">
            <div class="col" style="max-width: 49%">
                <label class="form-label fw-semibold">Start Date</label>
                <DateInput TValue="DateOnly"
                           @bind-Value="StartDate"
                           Placeholder="Start date"
                           Class="form-control-date"/>
            </div>
            <div class="col" style="max-width: 49%">
                <label class="form-label fw-semibold">End Date</label>
                <DateInput TValue="DateOnly"
                           @bind-Value="EndDate"
                           Placeholder="End date"
                           Class="form-control-date"/>
            </div>
            </div>
        </div>
    </div>
</div>
@code {
    private List<GenreItem> GenreList = new();
    private List<CountryItem> CountryList = new();
    
    private string? GenreName;
    private string? CountryName;

    private string Keywords
    {
        get => SearchStateService.Keywords;
        set => SearchStateService.Keywords = value;
    }
    private DateOnly StartDate
    {
        get => SearchStateService.StartDate;
        set => SearchStateService.StartDate = value;
    }

    private DateOnly EndDate
    {
        get => SearchStateService.EndDate;
        set => SearchStateService.EndDate = value;
    }

    // subscribe to search state service on change to render ui on change
    protected override async Task OnInitializedAsync()
    {
        SearchStateService.OnChange += StateHasChanged;

        // Load genre for dropdown from json 
        await LoadGenres();
        // Load countries for dropdown from json 
        await LoadCountries();

        GenreName = SearchStateService.SelectedGenre?.Name;
        CountryName = SearchStateService.SelectedCountry?.Name;
    }
    
    private void ClearGenre()
    {
        OnGenreSelected(new GenreItem()); 
    }

    private void ClearCountry()
    {
        OnCountrySelected(new CountryItem());
    }

    private async Task LoadGenres()
    {
        try
        {
            var filePath = Path.Combine(Env.WebRootPath, "genre_name_to_id.json");
            var json = await File.ReadAllTextAsync(filePath);
            var map = JsonSerializer.Deserialize<Dictionary<string, string>>(json);

            if (map is not null)
                GenreList = map.Select(g => new GenreItem { Name = g.Key, Id = g.Value }).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading genres: {ex.Message}");
        }
    }

    private async Task LoadCountries()
    {
        try
        {
            var filePath = Path.Combine(Env.WebRootPath, "countries.json");
            var json = await File.ReadAllTextAsync(filePath);
            var map = JsonSerializer.Deserialize<Dictionary<string, string>>(json);

            if (map is not null)
                CountryList = map.Select(c => new CountryItem { Name = c.Key, Code = c.Value }).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading countries: {ex.Message}");
        }
    }
    
  // functions required to fill bootstrap autocomplete 
    private async Task<AutoCompleteDataProviderResult<GenreItem>> GenresDataProvider(AutoCompleteDataProviderRequest<GenreItem> request)
        => await Task.FromResult(request.ApplyTo(GenreList.OrderBy(g => g.Name)));

    private async Task<AutoCompleteDataProviderResult<CountryItem>> CountryDataProvider(AutoCompleteDataProviderRequest<CountryItem> request)
        => await Task.FromResult(request.ApplyTo(CountryList.OrderBy(c => c.Name)));

    private void OnGenreSelected(GenreItem? genre)
    {
        if (genre is null) return;

        GenreName = genre.Name;
        SearchStateService.SelectedGenre = genre;
    }

    private void OnCountrySelected(CountryItem? country)
    {
        if (country is null) return;

        CountryName = country.Name;
        SearchStateService.SelectedCountry = country;
    }

    public void Dispose()
    {
        SearchStateService.OnChange -= StateHasChanged;
    }
}
<style>
    label {
        max-height:40%;
    }
    .col25 input {
        width: 95%!important;
    }
    .col50 {
        width: 50%;
    }
    .col75 {
        max-width: 70%;
    }
    .col75 .form-control {
        width: 98%!important;
    }
    .col75 .form-control input {
        max-width: 100%!important;
    }
    .col{
        max-height:100%;
        margin:0!important;
        padding: 0!important;
    }
    .row {
        display: flex;
        align-content: center;
        height: 45%;
        margin: 0 !important;
        padding: 0 !important;
        align-items: center;
        justify-content: flex-start;
    }
    .search-card {
        background-color: rgba(255, 255, 255, 0.6);
        border-radius: 12px;
        height: 85%;
        padding-left:18px;
        padding-right:18px;
    }

    .form-label {
        flex: 0 0 30%; 
        display: flex;
        align-items: flex-end; 
        font-size: 1em;
        margin:0!important;
    }

    .input-grouped{
        height:60%;
        max-height:60%;
        position: relative;
        display: flex;
        width: 98%;
        flex-direction: row;
        flex-wrap: nowrap;
        justify-content: flex-start;
        button {
            max-height:60% !important;
            padding: 0 !important;
            width:20%;
        }
    }
    .input-group- .auto-comp {
        width:100%;
        height:100%;
    }
    .form-control{
        font-size: 1rem;
        max-height: 60%;
        height: 60%;
    }

    .input-group .btn {
        min-width: 70px;
        max-height: 60%;
        width:20%;
        
    }
    .input-group input {
        width:80%!important;
    }
    
    .form-control-date input {
        width: 95% !important;
    }
    
    .btn-search {
        max-width: 20%!important;
    }
    .autocomplete {
        width: 80%!important;
    }
    .dropdown-menu {
        z-index: 9999 !important;
    }
    .bi{
        display: none;
    }
    
</style>
