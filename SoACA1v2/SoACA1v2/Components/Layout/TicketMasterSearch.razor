@using SoACA1v2.DataModels
@using SoACA1v2.Services
@using SoACA1v2.Services.StateManagement
@inject IConfiguration Configuration
@inject IWebHostEnvironment Env
@inject TicketMasterClient TicketMasterClient
@inject TicketMasterStateService TicketStateService
@using System.Text.Json

<h3>TicketMaster Search</h3>
<AutoComplete @bind-Value="SelectedGenreName"
              TItem="GenreItem"
              DataProvider="GenresDataProvider"
              PropertyName="Name"
              Placeholder="Select a genre..."
              OnChanged="OnGenreSelected" />

<AutoComplete @bind-Value="SelectedCountryName"
              TItem="CountryItem"
              DataProvider="CountryDataProvider"
              PropertyName="Name"
              Placeholder="Select a country..."
              OnChanged="OnCountrySelected" />

<DateInput TValue="DateOnly"
           @bind-Value="TicketStateService.TicketMasterSearchState.StartDate"
           Placeholder="Enter Start Date" />

<DateInput TValue="DateOnly"
           @bind-Value="TicketStateService.TicketMasterSearchState.EndDate"
           Placeholder="Enter End Date" />

<button @onclick="OnSearchButtonClicked">Search for events</button>

<h1>Ticketmaster Events</h1>

@if (IsLoading)
{
    <p>Loading events...</p>
}
else if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p style="color:red">@ErrorMessage</p>
}
else if (Events?.Any() == true)
{
    <ul>
        @foreach (var e in Events)
        {
            <li>@e.name - @e.dates?.start?.localDate</li>
        }
    </ul>
}
else
{
    <p>No events found.</p>
}

@code {
    private List<GenreItem> GenreList = new();
    private List<CountryItem> CountryList = new();
    private List<Events>? Events;
    private bool IsLoading = false;
    private string? ErrorMessage;
    private string? SelectedGenreName;
    private string? SelectedCountryName;

    protected override async Task OnInitializedAsync()
    {
        await LoadGenres();
        await LoadCountries();
    }

    private async Task OnSearchButtonClicked()
    {
        await DisplayNewEvents();
    }

    private async Task DisplayNewEvents()
    {
        IsLoading = true;
        ErrorMessage = null;

        try
        {
            var state = TicketStateService.TicketMasterSearchState;

            if (state.SelectedGenre is null || state.SelectedCountry is null)
            {
                ErrorMessage = "Please select both a genre and a country.";
                return;
            }

            var data = await TicketMasterClient.GetEventsByGenreAndCountry(state.SelectedCountry.Code, state.SelectedGenre.Id);

            Events = data?._embedded?.events?.ToList() ?? new List<Events>();

            Console.WriteLine($"✅ Loaded {Events.Count} events");
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Could not load events: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task LoadGenres()
    {
        try
        {
            var filePath = Path.Combine(Env.WebRootPath, "genre_name_to_id.json");
            var json = await File.ReadAllTextAsync(filePath);
            var genreMap = JsonSerializer.Deserialize<Dictionary<string, string>>(json);

            if (genreMap is not null)
            {
                GenreList = genreMap.Select(g => new GenreItem { Name = g.Key, Id = g.Value }).ToList();
                Console.WriteLine($"✅ Loaded {GenreList.Count} genres");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading genres: {ex.Message}");
        }
    }

    private async Task<AutoCompleteDataProviderResult<GenreItem>> GenresDataProvider(AutoCompleteDataProviderRequest<GenreItem> request)
    {
        return await Task.FromResult(request.ApplyTo(GenreList.OrderBy(genre => genre.Name)));
    }

    private void OnGenreSelected(GenreItem? genreSelected)
    {
        if (genreSelected != null)
        {
            TicketStateService.UpdateState(state => state.SelectedGenre = genreSelected);
            SelectedGenreName = genreSelected.Name;
            Console.WriteLine($"Selected genre: {genreSelected.Name} ({genreSelected.Id})");
        }
    }

    private async Task LoadCountries()
    {
        try
        {
            var filePath = Path.Combine(Env.WebRootPath, "countries.json");
            var json = await File.ReadAllTextAsync(filePath);
            var countryMap = JsonSerializer.Deserialize<Dictionary<string, string>>(json);

            if (countryMap is not null)
            {
                CountryList = countryMap.Select(c => new CountryItem { Name = c.Key, Code = c.Value }).ToList();
                Console.WriteLine($"✅ Loaded {CountryList.Count} countries");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading countries: {ex.Message}");
        }
    }

    private async Task<AutoCompleteDataProviderResult<CountryItem>> CountryDataProvider(AutoCompleteDataProviderRequest<CountryItem> request)
    {
        return await Task.FromResult(request.ApplyTo(CountryList.OrderBy(country => country.Name)));
    }

    private void OnCountrySelected(CountryItem? countrySelected)
    {
        if (countrySelected != null)
        {
            TicketStateService.UpdateState(state => state.SelectedCountry = countrySelected);
            SelectedCountryName = countrySelected.Name;
            Console.WriteLine($"Selected country: {countrySelected.Name} ({countrySelected.Code})");
        }
    }
}
